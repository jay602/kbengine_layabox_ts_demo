var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
var GameControl_1 = require("./script/GameControl");
var Bullet_1 = require("./script/Bullet");
var DropBox_1 = require("./script/DropBox");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
        reg("script/GameControl.ts", GameControl_1.default);
        reg("script/Bullet.ts", Bullet_1.default);
        reg("script/DropBox.ts", DropBox_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/Bullet":4,"./script/DropBox":5,"./script/GameControl":6,"./script/GameUI":7}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var KBEngine;
(function (KBEngine) {
    function transferArrayBuffer(source, length) {
        source = Object(source);
        var dest = new ArrayBuffer(length);
        if (!(source instanceof ArrayBuffer) || !(dest instanceof ArrayBuffer)) {
            throw new TypeError("ArrayBuffer.transfer, error: Source and destination must be ArrayBuffer instances");
        }
        if (dest.byteLength >= source.byteLength) {
            var buf = new Uint8Array(dest);
            buf.set(new Uint8Array(source), 0);
        }
        else {
            throw new RangeError("ArrayBuffer.transfer, error: destination has not enough space");
        }
        return dest;
    }
    ;
    /*-----------------------------------------------------------------------------------------
                                                global
    -----------------------------------------------------------------------------------------*/
    var PACKET_MAX_SIZE = 1500;
    var PACKET_MAX_SIZE_TCP = 1460;
    var PACKET_MAX_SIZE_UDP = 1472;
    var MESSAGE_ID_LENGTH = 2;
    var MESSAGE_LENGTH_LENGTH = 2;
    var MESSAGE_LENGTH1_LENGTH = 4;
    var MESSAGE_MAX_SIZE = 65535;
    var CLIENT_NO_FLOAT = 0;
    var KBE_FLT_MAX = 3.402823466e+38;
    var Dbg = /** @class */ (function () {
        function Dbg() {
        }
        Dbg.getHead = function () {
            var now = new Date();
            return "[" + now.getFullYear() + "-" + (now.getMonth() + 1) + "-" + now.getDate() + " " + now.getHours()
                + ":" + now.getMinutes() + ":" + now.getSeconds() + " " + now.getMilliseconds() + "] ";
        };
        Dbg.DEBUG_MSG = function (msg) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            if (0 /* DEBUG */ >= this.debugLevel) {
                params.unshift(this.getHead(), msg);
                console.debug.apply(this, params);
            }
        };
        Dbg.INFO_MSG = function (msg) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            if (1 /* INFO */ >= this.debugLevel) {
                params.unshift(this.getHead(), msg);
                console.info.apply(this, params);
            }
        };
        Dbg.WARNING_MSG = function (msg) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            if (2 /* WARNING */ >= this.debugLevel) {
                params.unshift(this.getHead(), msg);
                console.warn.apply(this, params);
            }
        };
        Dbg.ERROR_MSG = function (msg) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            if (3 /* ERROR */ >= this.debugLevel) {
                params.unshift(this.getHead(), msg);
                console.error.apply(this, params);
            }
        };
        Dbg.ASSERT = function (condition, message) {
            var data = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                data[_i - 2] = arguments[_i];
            }
            // 使用抛出异常的方式来实现类似断言功能
            if (!condition) {
                throw (new Error(message));
            }
            // note：微信小游戏平台不支持，手册中提到的CC_WECHATGAME未定义，无法区分是否微信小游戏平台，
            // console.assert(condition, message, ...data);
            // 一些平台如小程序上可能没有assert
            // if(console.assert == undefined)
            // {
            //     console.assert = function(bRet, s)
            //     {
            //         if(!(bRet)) {
            //             ERROR_MSG(s);
            //         }
            //     }
            // }
        };
        Dbg.debugLevel = 0 /* DEBUG */;
        return Dbg;
    }());
    KBEngine.Dbg = Dbg;
    var EventInfo = /** @class */ (function () {
        function EventInfo(classinst, callbackfn) {
            this.classinst = classinst;
            this.callbackfn = callbackfn;
        }
        return EventInfo;
    }());
    var FiredEvent = /** @class */ (function () {
        function FiredEvent(evtName, evtInfo, args) {
            this.evtName = evtName;
            this.evtInfo = evtInfo;
            this.args = args;
        }
        return FiredEvent;
    }());
    var KBEvent = /** @class */ (function () {
        function KBEvent() {
        }
        KBEvent.register = function (evtName, classinst, strCallback) {
            var callbackfn = classinst[strCallback];
            if (callbackfn == undefined) {
                Dbg.ERROR_MSG('KBEngine.KBEvent::fire: not found strCallback(' + classinst + ")!" + strCallback);
                return;
            }
            var evtlst = this._events[evtName];
            if (evtlst == undefined) {
                evtlst = [];
                this._events[evtName] = evtlst;
            }
            var info = new EventInfo(classinst, callbackfn);
            evtlst.push(info);
        };
        KBEvent.deregisterAll = function (classinst) {
            for (var itemkey in this._events) {
                this.deregister(itemkey, classinst);
            }
        };
        KBEvent.deregister = function (evtName, classinst) {
            var evtlst = this._events[evtName];
            if (evtlst == undefined) {
                Dbg.ERROR_MSG("KBEvent::deregister:cant find event by name(%s).", evtName);
                return;
            }
            while (true) {
                var found = false;
                for (var i = 0; i < evtlst.length; i++) {
                    var info = evtlst[i];
                    if (info.classinst == classinst) {
                        evtlst.splice(i, 1);
                        found = true;
                        break;
                    }
                }
                if (!found)
                    break;
            }
            this.removeFiredEvent(evtName, classinst);
        };
        KBEvent.fire = function (evtName) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            var evtlst = this._events[evtName];
            if (evtlst == undefined) {
                Dbg.ERROR_MSG("KBEvent::Fire:cant find event by name(%s).", evtName);
                return;
            }
            for (var _a = 0, evtlst_1 = evtlst; _a < evtlst_1.length; _a++) {
                var info = evtlst_1[_a];
                try {
                    if (!this._isPause) {
                        info.callbackfn.apply(info.classinst, params);
                    }
                    else {
                        var firedEvent = new FiredEvent(evtName, info, params);
                        this._firedEvents.push(firedEvent);
                    }
                }
                catch (e) {
                    Dbg.ERROR_MSG("KBEvent::Fire(%s):%s", evtName, e);
                }
            }
        };
        KBEvent.pause = function () {
            this._isPause = true;
        };
        KBEvent.resume = function () {
            this._isPause = false;
            var firedEvents = this._firedEvents;
            Dbg.INFO_MSG("resume");
            while (firedEvents.length > 0) {
                var evt = firedEvents.shift();
                var info = evt.evtInfo;
                var args = evt.args;
                Dbg.INFO_MSG("resume evtname: " + evt.evtName);
                if (args.length < 1) {
                    info.callbackfn.apply(info.classinst);
                }
                else {
                    info.callbackfn.apply(info.classinst, args);
                }
            }
        };
        KBEvent.removeAllFiredEvent = function (classinst) {
            this.removeFiredEvent("", classinst);
        };
        KBEvent.removeFiredEvent = function (evtName, classinst) {
            var firedEvents = this._firedEvents;
            while (true) {
                var found = false;
                for (var i = 0; i < firedEvents.length; i++) {
                    var evt = firedEvents[i];
                    if ((evtName == "" || evt.evtName == evtName) && evt.evtInfo.classinst == classinst) {
                        firedEvents.splice(i, 1);
                        found = true;
                        break;
                    }
                }
                if (!found)
                    break;
            }
        };
        KBEvent._events = {};
        KBEvent._isPause = false;
        KBEvent._firedEvents = [];
        return KBEvent;
    }());
    KBEngine.KBEvent = KBEvent;
    /*-----------------------------------------------------------------------------------------
                                                network
    -----------------------------------------------------------------------------------------*/
    var NetworkInterface = /** @class */ (function () {
        function NetworkInterface() {
            var _this = this;
            this.socket = undefined;
            this.onOpenCB = undefined;
            this.onopen = function (event) {
                Dbg.ERROR_MSG("NetworkInterface::onopen:success!");
                if (_this.onOpenCB) {
                    _this.onOpenCB(event);
                    _this.onOpenCB = undefined;
                }
            };
            this.onerror = function (event) {
                // KBEDebug.DEBUG_MSG("NetworkInterface::onerror:...!");
                // KBEEvent.Fire("onNetworkError", event);
            };
            this.onmessage = function (event) {
            };
            this.onclose = function () {
                // KBEDebug.DEBUG_MSG("NetworkInterface::onclose:...!");
                // KBEEvent.Fire("onDisconnected");
            };
        }
        NetworkInterface.prototype.connectTo = function (addr, callbackFunc) {
            try {
                this.socket = new WebSocket(addr);
                Dbg.ERROR_MSG("NetworkInterface::connectTo:Init socket");
            }
            catch (e) {
                Dbg.ERROR_MSG("NetworkInterface::connectTo:Init socket error:" + e);
                KBEvent.fire("onConnectionState", false);
                return;
            }
            this.socket.binaryType = "arraybuffer";
            this.socket.onerror = this.onerror;
            this.socket.onclose = this.onclose;
            this.socket.onmessage = this.onmessage;
            this.socket.onopen = this.onopen;
            if (callbackFunc) {
                this.onOpenCB = callbackFunc;
            }
        };
        NetworkInterface.prototype.close = function () {
        };
        NetworkInterface.prototype.send = function (buffer) {
        };
        return NetworkInterface;
    }());
    /*-----------------------------------------------------------------------------------------
                                                number64bits
    -----------------------------------------------------------------------------------------*/
    var INT64 = /** @class */ (function () {
        function INT64(p_low, p_high) {
            this.sign = 1;
            this.low = p_low;
            this.high = p_high;
            if (p_high >= 2147483648) {
                this.sign = -1;
                this.low = (4294967296 - this.low) & 0xffffffff;
                if (p_low > 0) {
                    this.high = 4294967295 - this.high;
                }
                else {
                    this.high = 4294967296 - this.high;
                }
            }
        }
        return INT64;
    }());
    var UINT64 = /** @class */ (function () {
        function UINT64(p_low, p_high) {
            this.low = p_low >>> 0;
            this.high = p_high;
        }
        return UINT64;
    }());
    /*-----------------------------------------------------------------------------------------
                                                memorystream
    -----------------------------------------------------------------------------------------*/
    var PackFloatXType = /** @class */ (function () {
        function PackFloatXType() {
            this._unionData = new ArrayBuffer(4);
            this.fv = new Float32Array(this._unionData, 0, 1);
            this.uv = new Uint32Array(this._unionData, 0, 1);
            this.iv = new Int32Array(this._unionData, 0, 1);
        }
        return PackFloatXType;
    }());
    var MemoryStream = /** @class */ (function () {
        function MemoryStream(size_or_buffer) {
            this.rpos = 0;
            this.wpos = 0;
            if (size_or_buffer instanceof ArrayBuffer) {
                this.buffer = size_or_buffer;
            }
            else {
                this.buffer = new ArrayBuffer(size_or_buffer);
            }
        }
        MemoryStream.prototype.space = function () {
            return this.buffer.byteLength - this.wpos;
        };
        MemoryStream.prototype.readInt8 = function () {
            var buf = new Int8Array(this.buffer, this.rpos);
            this.rpos += 1;
            return buf[0];
        };
        MemoryStream.prototype.readUint8 = function () {
            var buf = new Uint8Array(this.buffer, this.rpos);
            this.rpos += 1;
            return buf[0];
        };
        MemoryStream.prototype.readUint16 = function () {
            var buf = new Uint8Array(this.buffer, this.rpos);
            this.rpos += 2;
            return ((buf[1] & 0xff) << 8) + (buf[0] & 0xff);
        };
        MemoryStream.prototype.readInt16 = function () {
            var value = this.readUint16();
            if (value >= 32768)
                value -= 65536;
            return value;
        };
        MemoryStream.prototype.readUint32 = function () {
            var buf = new Uint8Array(this.buffer, this.rpos);
            this.rpos += 4;
            return (buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + buf[0];
        };
        MemoryStream.prototype.readInt32 = function () {
            var value = this.readUint32();
            if (value >= 2147483648)
                value -= 4294967296;
            return value;
        };
        MemoryStream.prototype.readUint64 = function () {
            return new UINT64(this.readUint32(), this.readUint32());
        };
        MemoryStream.prototype.readInt64 = function () {
            return new INT64(this.readUint32(), this.readUint32());
        };
        MemoryStream.prototype.readFloat = function () {
            var buf = undefined;
            try {
                buf = new Float32Array(this.buffer, this.rpos, 1);
            }
            catch (e) {
                buf = new Float32Array(this.buffer.slice(this.rpos, this.rpos + 4));
            }
            this.rpos += 4;
            return buf[0];
        };
        MemoryStream.prototype.readDouble = function () {
            var buf = undefined;
            try {
                buf = new Float64Array(this.buffer, this.rpos, 1);
            }
            catch (e) {
                buf = new Float64Array(this.buffer.slice(this.rpos, this.rpos + 8), 0, 1);
            }
            this.rpos += 8;
            return buf[0];
        };
        MemoryStream.prototype.readString = function () {
            var buf = new Int8Array(this.buffer, this.rpos);
            var value = "";
            var index = 0;
            while (true) {
                if (buf[index] != 0) {
                    value += String.fromCharCode(buf[index]);
                    index += 1;
                    if (this.rpos + index >= this.buffer.byteLength) {
                        throw (new Error("KBEngine.MemoryStream::ReadString overflow(>=) max length:" + this.buffer.byteLength));
                    }
                }
                else {
                    index += 1;
                    break;
                }
            }
            this.rpos += index;
            return value;
        };
        MemoryStream.prototype.readBlob = function () {
            var size = this.readUint32();
            var buf = new Uint8Array(this.buffer, this.rpos, size);
            this.rpos += size;
            return buf;
        };
        MemoryStream.prototype.readPackXZ = function () {
            var xPackData = new PackFloatXType();
            var zPackData = new PackFloatXType();
            xPackData.fv[0] = 0.0;
            zPackData.fv[0] = 0.0;
            xPackData.uv[0] = 0x40000000;
            zPackData.uv[0] = 0x40000000;
            var v1 = this.readUint8();
            var v2 = this.readUint8();
            var v3 = this.readUint8();
            var data = 0;
            data |= (v1 << 16);
            data |= (v2 << 8);
            data |= v3;
            xPackData.uv[0] |= (data & 0x7ff000) << 3;
            zPackData.uv[0] |= (data & 0x0007ff) << 15;
            xPackData.fv[0] -= 2.0;
            zPackData.fv[0] -= 2.0;
            xPackData.uv[0] |= (data & 0x800000) << 8;
            zPackData.uv[0] |= (data & 0x000800) << 20;
            var xzData = new Array(2);
            xzData[0] = xPackData.fv[0];
            xzData[1] = zPackData.fv[0];
            return xzData;
        };
        MemoryStream.prototype.readPackY = function () {
            var data = this.readUint16();
            var yPackData = new PackFloatXType();
            yPackData.uv[0] = 0x40000000;
            yPackData.uv[0] |= (data & 0x7fff) << 12; // 解压，补足尾数
            yPackData.fv[0] -= 2.0; // 此时还未设置符号位，当作正数处理，-2后再加上符号位即可，无需根据正负来+-2
            yPackData.uv[0] |= (data & 0x8000) << 16; // 设置符号位
            return yPackData.fv[0];
        };
        MemoryStream.prototype.writeInt8 = function (value) {
            var buf = new Int8Array(this.buffer, this.wpos, 1);
            buf[0] = value;
            this.wpos += 1;
        };
        MemoryStream.prototype.writeUint8 = function (value) {
            var buf = new Uint8Array(this.buffer, this.wpos, 1);
            buf[0] = value;
            this.wpos += 1;
        };
        MemoryStream.prototype.writeInt16 = function (value) {
            this.writeInt8(value & 0xff);
            this.writeInt8((value >> 8) & 0xff);
        };
        MemoryStream.prototype.writeUint16 = function (value) {
            this.writeUint8(value & 0xff);
            this.writeUint8((value >> 8) & 0xff);
        };
        MemoryStream.prototype.writeInt32 = function (value) {
            for (var i = 0; i < 4; i++)
                this.writeInt8((value >> i * 8) & 0xff);
        };
        MemoryStream.prototype.writeUint32 = function (value) {
            for (var i = 0; i < 4; i++)
                this.writeInt8((value >> i * 8) & 0xff);
        };
        MemoryStream.prototype.writeInt64 = function (value) {
            this.writeInt32(value.low);
            this.writeInt32(value.high);
        };
        MemoryStream.prototype.writeUint64 = function (value) {
            this.writeUint32(value.low);
            this.writeUint32(value.high);
        };
        MemoryStream.prototype.writeFloat = function (value) {
            try {
                var buf = new Float32Array(this.buffer, this.wpos, 1);
                buf[0] = value;
            }
            catch (e) {
                var buf = new Float32Array(1);
                buf[0] = value;
                var buf1 = new Uint8Array(this.buffer);
                var buf2 = new Uint8Array(buf.buffer);
                buf1.set(buf2, this.wpos);
            }
            this.wpos += 4;
        };
        MemoryStream.prototype.writeDouble = function (value) {
            try {
                var buf = new Float64Array(this.buffer, this.wpos, 1);
                buf[0] = value;
            }
            catch (e) {
                var buf = new Float64Array(1);
                buf[0] = value;
                var buf1 = new Uint8Array(this.buffer);
                var buf2 = new Uint8Array(buf.buffer);
                buf1.set(buf2, this.wpos);
            }
            this.wpos += 8;
        };
        MemoryStream.prototype.writeBlob = function (value) {
            var size = value.length;
            if (size + 4 > this.space()) {
                Dbg.ERROR_MSG("KBE.MemoryStream:WriteBlob:there is no space for size:%d", size + 4);
                return;
            }
            this.writeUint32(size);
            var buf = new Uint8Array(this.buffer, this.wpos, size);
            if (typeof (value) == "string") {
                for (var i = 0; i < size; i++) {
                    buf[i] = value.charCodeAt(i);
                }
            }
            else {
                for (var i = 0; i < size; i++) {
                    buf[i] = value[i];
                }
            }
            this.wpos += size;
        };
        MemoryStream.prototype.writeString = function (value) {
            if (value.length + 1 > this.space()) {
                Dbg.ERROR_MSG("KBE.MemoryStream:WriteString:there is no space for size:%d", value.length + 1);
                return;
            }
            var buf = new Uint8Array(this.buffer, this.wpos, value.length);
            for (var i = 0; i < value.length; i++) {
                buf[i] = value.charCodeAt(i);
            }
            buf[value.length] = 0;
            this.wpos = this.wpos + value.length + 1;
        };
        MemoryStream.prototype.readSkip = function (count) {
            this.rpos += count;
        };
        MemoryStream.prototype.length = function () {
            return this.wpos - this.rpos;
        };
        MemoryStream.prototype.readEOF = function () {
            return this.buffer.byteLength - this.rpos <= 0;
        };
        MemoryStream.prototype.done = function () {
            this.rpos = this.wpos;
        };
        MemoryStream.prototype.getBuffer = function () {
            return this.buffer.slice(this.rpos, this.wpos);
        };
        MemoryStream.prototype.getRawBuffer = function () {
            return this.buffer;
        };
        MemoryStream.prototype.clear = function () {
            this.rpos = 0;
            this.wpos = 0;
            if (this.buffer.byteLength > PACKET_MAX_SIZE)
                this.buffer = new ArrayBuffer(PACKET_MAX_SIZE);
        };
        MemoryStream.prototype.append = function (stream, offset, size) {
            if (!(stream instanceof MemoryStream)) {
                Dbg.ERROR_MSG("MemoryStream::append(): stream must be MemoryStream instances");
                return;
            }
            if (size > this.space()) {
                this.buffer = transferArrayBuffer(this.buffer, this.buffer.byteLength + size * 2);
            }
            var buf = new Uint8Array(this.buffer, this.wpos, size);
            buf.set(new Uint8Array(stream.buffer, offset, size), 0);
            this.wpos += size;
        };
        return MemoryStream;
    }());
    var KBEngineArgs = /** @class */ (function () {
        function KBEngineArgs() {
            this.address = "127.0.0.1";
            this.port = 20013;
            this.serverHeartbeatTick = 100;
            this.clientType = 5;
            this.isOnInitCallPropertysSetMethods = true;
            this.isWss = false;
        }
        return KBEngineArgs;
    }());
    KBEngine.KBEngineArgs = KBEngineArgs;
    var KBEngineApp = /** @class */ (function () {
        function KBEngineApp(args) {
            this.networkInterface = new NetworkInterface();
            this.username = "test";
            this.password = "123456";
            this.clientdatas = new Uint8Array(0);
            this.encryptedKey = "";
            this.loginappMessageImported = false;
            this.baseappMessageImported = false;
            this.serverErrorsDescrImported = false;
            this.entitydefImported = false;
            // 登录loginapp的地址
            this.serverAddress = "";
            this.port = 0;
            // 服务端分配的baseapp地址
            this.baseappAddress = "";
            this.baseappPort = 0;
            this.isWss = false;
            this.protocol = "ws://";
            // 当前状态
            this.currserver = "";
            this.currstate = "";
            this.currconnect = "";
            // 扩展数据
            this.serverdatas = "";
            // 版本信息
            this.serverVersion = "";
            this.serverScriptVersion = "";
            this.serverProtocolMD5 = "";
            this.serverEntityDefMD5 = "";
            this.clientVersion = "";
            this.clientScriptVersion = "";
            // player的相关信息
            this.entity_id = 0;
            //private entity_uuid: DataTypes.UINT64;
            this.entity_type = "";
            // private controlledEntities: Array<Entity> = new Array<Entity>();
            // private entityIDAliasIDList: Array<number> = new Array<number>();
            // // 这个参数的选择必须与kbengine_defs.xml::cellapp/aliasEntityID的参数保持一致
            // useAliasEntityID = true;
            // isOnInitCallPropertysSetMethods = true;
            // // 当前玩家最后一次同步到服务端的位置与朝向与服务端最后一次同步过来的位置
            // entityServerPos = new KBEMath.Vector3(0.0, 0.0, 0.0);
            // 客户端所有的实体
            // KBEngine.app.entities = {};
            // KBEngine.app.entityIDAliasIDList = [];
            // KBEngine.app.controlledEntities = [];
            // spacedata: {[key:string]: string} = {};
            // spaceID = 0;
            // spaceResPath = "";
            // isLoadedGeometry = false;
            // lastTickTime
            // lastTickCBTime
            // 按照标准，每个客户端部分都应该包含这个属性
            this.component = "";
            Dbg.ASSERT(KBEngineApp.app === undefined, "KBEngineApp::constructor:singleton KBEngineApp._app must be undefined.");
            KBEngineApp.app = this;
            this.initialize(args);
        }
        KBEngineApp.getSingleton = function () {
            if (KBEngineApp.app == undefined) {
                throw new Error("Please create KBEngineApp!");
            }
            return KBEngineApp.app;
        };
        KBEngineApp.prototype.initialize = function (args) {
            this.args = args;
            this.serverAddress = args.address;
            this.port = args.port;
            this.isWss = args.isWss;
            this.protocol = args.isWss ? "wss://" : "ws://";
            this.initNetwork();
            this.installEvents();
            return true;
        };
        KBEngineApp.prototype.initNetwork = function () {
        };
        KBEngineApp.prototype.installEvents = function () {
            KBEvent.register("login" /* login */, KBEngineApp.app, "login");
        };
        KBEngineApp.prototype.resetSocket = function () {
        };
        KBEngineApp.prototype.reset = function () {
            // if(KBEngineApp.app.entities != undefined && KBEngineApp.app.entities != null)
            // {
            //     KBEngineApp.app.clearEntities(true);
            // }
            KBEngineApp.app.resetSocket();
            KBEngineApp.app.currserver = "loginapp";
            KBEngineApp.app.currstate = "create";
            KBEngineApp.app.currconnect = "loginapp";
            // 扩展数据
            KBEngineApp.app.serverdatas = "";
            // 版本信息
            KBEngineApp.app.serverVersion = "";
            KBEngineApp.app.serverScriptVersion = "";
            KBEngineApp.app.serverProtocolMD5 = "";
            KBEngineApp.app.serverEntityDefMD5 = "";
            KBEngineApp.app.clientVersion = "1.2.7";
            KBEngineApp.app.clientScriptVersion = "0.1.0";
            // // player的相关信息
            // KBEngineApp.app.entity_uuid = null;
            // KBEngineApp.app.entity_id = 0;
            // KBEngineApp.app.entity_type = "";
            // // 这个参数的选择必须与kbengine_defs.xml::cellapp/aliasEntityID的参数保持一致
            // KBEngineApp.app.useAliasEntityID = true;
            // // 当前玩家最后一次同步到服务端的位置与朝向与服务端最后一次同步过来的位置
            // KBEngineApp.app.entityServerPos = new KBEngine.Vector3(0.0, 0.0, 0.0);
            // // 客户端所有的实体
            // KBEngineApp.app.entities = {};
            // KBEngineApp.app.entityIDAliasIDList = [];
            // KBEngineApp.app.controlledEntities = [];
            // // 空间的信息
            // KBEngineApp.app.spacedata = {};
            // KBEngineApp.app.spaceID = 0;
            // KBEngineApp.app.spaceResPath = "";
            // KBEngineApp.app.isLoadedGeometry = false;
            // var dateObject = new Date();
            // KBEngineApp.app.lastTickTime = dateObject.getTime();
            // KBEngineApp.app.lastTickCBTime = dateObject.getTime();
            // KBEngine.mappingDataType();
            // 当前组件类别， 配套服务端体系
            KBEngineApp.app.component = "client";
        };
        KBEngineApp.prototype.getServerAddr = function (ip, port) {
            var serverAddr = KBEngineApp.app.protocol + ip;
            if (port != 0) {
                serverAddr += ":" + port;
            }
            return serverAddr;
        };
        KBEngineApp.prototype.login = function (username, password, datas) {
            KBEngineApp.app.reset();
            KBEngineApp.app.username = username;
            KBEngineApp.app.password = password;
            KBEngineApp.app.clientdatas = datas;
            KBEngineApp.app.login_loginapp(true);
        };
        KBEngineApp.prototype.login_loginapp = function (noconnect) {
            var _this = this;
            if (noconnect) {
                var serverAddr = this.getServerAddr(KBEngineApp.app.serverAddress, KBEngineApp.app.port);
                Dbg.INFO_MSG("KBEngineApp::login_loginapp: start connect to " + serverAddr + "!");
                KBEngineApp.app.currconnect = "loginapp";
                KBEngineApp.app.networkInterface.connectTo(serverAddr, function (event) { return _this.onOpenLoginapp_login(event); });
            }
            else {
            }
        };
        KBEngineApp.prototype.onOpenLoginapp_login = function (event) {
            Dbg.DEBUG_MSG("KBEngineApp::onOpenLoginapp_login:success to %s.", this.serverAddress);
            KBEvent.fire("onConnectionState" /* onConnectionState */, true);
            this.currserver = "loginapp";
            this.currstate = "login";
            if (!this.loginappMessageImported) {
                Dbg.INFO_MSG("KBEngineApp::onOpenLoginapp_login: start importClientMessages ...");
                KBEvent.fire("Loginapp_importClientMessages");
            }
            else {
                this.onImportClientMessagesCompleted();
            }
        };
        KBEngineApp.prototype.onImportClientMessagesCompleted = function () {
        };
        KBEngineApp.app = undefined;
        return KBEngineApp;
    }());
    KBEngine.KBEngineApp = KBEngineApp;
})(KBEngine = exports.KBEngine || (exports.KBEngine = {}));
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 子弹脚本，实现子弹飞行逻辑及对象池回收机制
 */
var Bullet = /** @class */ (function (_super) {
    __extends(Bullet, _super);
    function Bullet() {
        return _super.call(this) || this;
    }
    Bullet.prototype.onEnable = function () {
        //设置初始速度
        var rig = this.owner.getComponent(Laya.RigidBody);
        rig.setVelocity({ x: 0, y: -10 });
    };
    Bullet.prototype.onTriggerEnter = function (other, self, contact) {
        //如果被碰到，则移除子弹
        this.owner.removeSelf();
    };
    Bullet.prototype.onUpdate = function () {
        //如果子弹超出屏幕，则移除子弹
        if (this.owner.y < -10) {
            this.owner.removeSelf();
        }
    };
    Bullet.prototype.onDisable = function () {
        //子弹被移除时，回收子弹到对象池，方便下次复用，减少对象创建开销
        Laya.Pool.recover("bullet", this.owner);
    };
    return Bullet;
}(Laya.Script));
exports.default = Bullet;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameUI_1 = require("./GameUI");
/**
 * 掉落盒子脚本，实现盒子碰撞及回收流程
 */
var DropBox = /** @class */ (function (_super) {
    __extends(DropBox, _super);
    function DropBox() {
        var _this = _super.call(this) || this;
        /**盒子等级 */
        _this.level = 1;
        return _this;
    }
    DropBox.prototype.onEnable = function () {
        /**获得组件引用，避免每次获取组件带来不必要的查询开销 */
        this._rig = this.owner.getComponent(Laya.RigidBody);
        this.level = Math.round(Math.random() * 5) + 1;
        this._text = this.owner.getChildByName("levelTxt");
        this._text.text = this.level + "";
    };
    DropBox.prototype.onUpdate = function () {
        //让持续盒子旋转
        this.owner.rotation++;
    };
    DropBox.prototype.onTriggerEnter = function (other, self, contact) {
        var owner = this.owner;
        if (other.label === "buttle") {
            //碰撞到子弹后，增加积分，播放声音特效
            if (this.level > 1) {
                this.level--;
                this._text.changeText(this.level + "");
                owner.getComponent(Laya.RigidBody).setVelocity({ x: 0, y: -10 });
                Laya.SoundManager.playSound("sound/hit.wav");
            }
            else {
                if (owner.parent) {
                    var effect = Laya.Pool.getItemByCreateFun("effect", this.createEffect, this);
                    effect.pos(owner.x, owner.y);
                    owner.parent.addChild(effect);
                    effect.play(0, true);
                    owner.removeSelf();
                    Laya.SoundManager.playSound("sound/destroy.wav");
                }
            }
            GameUI_1.default.instance.addScore(1);
        }
        else if (other.label === "ground") {
            //只要有一个盒子碰到地板，则停止游戏
            owner.removeSelf();
            GameUI_1.default.instance.stopGame();
        }
    };
    /**使用对象池创建爆炸动画 */
    DropBox.prototype.createEffect = function () {
        var ani = new Laya.Animation();
        ani.loadAnimation("test/testAni.ani");
        ani.on(Laya.Event.COMPLETE, null, recover);
        function recover() {
            ani.removeSelf();
            Laya.Pool.recover("effect", ani);
        }
        return ani;
    };
    DropBox.prototype.onDisable = function () {
        //盒子被移除时，回收盒子到对象池，方便下次复用，减少对象创建开销。
        Laya.Pool.recover("dropBox", this.owner);
    };
    return DropBox;
}(Laya.Script));
exports.default = DropBox;
},{"./GameUI":7}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 游戏控制脚本。定义了几个dropBox，bullet，createBoxInterval等变量，能够在IDE显示及设置该变量
 * 更多类型定义，请参考官方文档
 */
var GameControl = /** @class */ (function (_super) {
    __extends(GameControl, _super);
    function GameControl() {
        var _this = _super.call(this) || this;
        /** @prop {name:createBoxInterval,tips:"间隔多少毫秒创建一个下跌的容器",type:int,default:1000}*/
        _this.createBoxInterval = 1000;
        /**开始时间*/
        _this._time = 0;
        /**是否已经开始游戏 */
        _this._started = false;
        return _this;
    }
    GameControl.prototype.onEnable = function () {
        this._time = Date.now();
        this._gameBox = this.owner.getChildByName("gameBox");
        this.createBox();
    };
    GameControl.prototype.onUpdate = function () {
        //每间隔一段时间创建一个盒子
        var now = Date.now();
        if (now - this._time > this.createBoxInterval) {
            this._time = now;
            this.createBox();
        }
    };
    GameControl.prototype.createBox = function () {
        //使用对象池创建盒子
        var box = Laya.Pool.getItemByCreateFun("dropBox", this.dropBox.create, this.dropBox);
        box.pos(Math.random() * (Laya.stage.width - 100), -100);
        this._gameBox.addChild(box);
    };
    GameControl.prototype.onStageClick = function (e) {
        //停止事件冒泡，提高性能，当然也可以不要
        e.stopPropagation();
        //舞台被点击后，使用对象池创建子弹
        var flyer = Laya.Pool.getItemByCreateFun("bullet", this.bullet.create, this.bullet);
        flyer.pos(Laya.stage.mouseX, Laya.stage.mouseY);
        this._gameBox.addChild(flyer);
    };
    /**开始游戏，通过激活本脚本方式开始游戏*/
    GameControl.prototype.startGame = function () {
        if (!this._started) {
            this._started = true;
            this.enabled = true;
        }
    };
    /**结束游戏，通过非激活本脚本停止游戏 */
    GameControl.prototype.stopGame = function () {
        this._started = false;
        this.enabled = false;
        this.createBoxInterval = 1000;
        this._gameBox.removeChildren();
    };
    return GameControl;
}(Laya.Script));
exports.default = GameControl;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var GameControl_1 = require("./GameControl");
var KBEngine_1 = require("../kbengine_ts_plugins/KBEngine");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameUI = /** @class */ (function (_super) {
    __extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        GameUI.instance = _this;
        //关闭多点触控，否则就无敌了
        Laya.MouseManager.multiTouchEnabled = false;
        return _this;
    }
    GameUI.prototype.onEnable = function () {
        this._control = this.getComponent(GameControl_1.default);
        //点击提示文字，开始游戏
        this.tipLbll.on(Laya.Event.CLICK, this, this.onTipClick);
        var args = new KBEngine_1.KBEngine.KBEngineArgs();
        args.address = "127.0.0.1";
        args.port = 20013;
        var app = new KBEngine_1.KBEngine.KBEngineApp(args);
        KBEngine_1.KBEngine.KBEvent.fire("login", "loginName", "123456", "");
    };
    GameUI.prototype.onTipClick = function (e) {
        this.tipLbll.visible = false;
        this._score = 0;
        this.scoreLbl.text = "";
        this._control.startGame();
    };
    /**增加分数 */
    GameUI.prototype.addScore = function (value) {
        if (value === void 0) { value = 1; }
        this._score += value;
        this.scoreLbl.changeText("分数：" + this._score);
        //随着分数越高，难度增大
        if (this._control.createBoxInterval > 600 && this._score % 20 == 0)
            this._control.createBoxInterval -= 20;
    };
    /**停止游戏 */
    GameUI.prototype.stopGame = function () {
        this.tipLbll.visible = true;
        this.tipLbll.text = "游戏结束了，点击屏幕重新开始";
        this._control.stopGame();
    };
    return GameUI;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = GameUI;
},{"../kbengine_ts_plugins/KBEngine":3,"./../ui/layaMaxUI":8,"./GameControl":6}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
